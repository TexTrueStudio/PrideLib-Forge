plugins {
	//id 'fabric-loom' version '0.12.+'
	//id 'io.github.juuxel.loom-quiltflower' version '1.7.+'
	//id 'org.quiltmc.quilt-mappings-on-loom' version '4.0.0'
	id 'java-library'
	id 'maven-publish'
	id 'dev.architectury.loom' version '0.12.0-SNAPSHOT'
}

archivesBaseName = project.archives_base_name
version = "${project.mod_version}+${getMCVersionString()}"
group = project.maven_group

// This field defines the Java version your mod target.
def targetJavaVersion = 17

boolean isMCVersionNonRelease() {
	return project.minecraft_version.matches('^\\d\\dw\\d\\d[a-z]$')
			|| project.minecraft_version.matches('\\d+\\.\\d+-(pre|rc)(\\d+)')
}

String getMCVersionString() {
	if (isMCVersionNonRelease()) {
		return project.minecraft_version
	}
	def version = project.minecraft_version.split('\\.')
	return version[0] + '.' + version[1]
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	//modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	forge "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

	modImplementation fabricApi.module('fabric-resource-loader-v0', project.fabric_api_version)
}

java {
	sourceCompatibility = JavaVersion.toVersion(targetJavaVersion)
	targetCompatibility = JavaVersion.toVersion(targetJavaVersion)

	withSourcesJar()
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = 'UTF-8'

	it.options.release.set(targetJavaVersion)
}

processResources {
	inputs.property 'version', project.version

	filesMatching('META-INF/mods.toml') {
		expand 'version': project.version
	}
}

jar {
	from('LICENSE') {
		rename { "${it}_${project.archivesBaseName}" }
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	repositories {
		mavenLocal()
		maven {
			name 'BuildDirLocal'
			url "$buildDir/repo"
		}
	}
}
